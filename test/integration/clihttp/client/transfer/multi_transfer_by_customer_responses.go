// Code generated by go-swagger; DO NOT EDIT.

package transfer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/anoideaopen/channel-transfer/test/integration/clihttp/models"
)

// MultiTransferByCustomerReader is a Reader for the MultiTransferByCustomer structure.
type MultiTransferByCustomerReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MultiTransferByCustomerReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMultiTransferByCustomerOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewMultiTransferByCustomerInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewMultiTransferByCustomerDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewMultiTransferByCustomerOK creates a MultiTransferByCustomerOK with default headers values
func NewMultiTransferByCustomerOK() *MultiTransferByCustomerOK {
	return &MultiTransferByCustomerOK{}
}

/*
MultiTransferByCustomerOK describes a response with status code 200, with default header values.

A successful response.
*/
type MultiTransferByCustomerOK struct {
	Payload *models.ChannelTransferTransferStatusResponse
}

// IsSuccess returns true when this multi transfer by customer o k response has a 2xx status code
func (o *MultiTransferByCustomerOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this multi transfer by customer o k response has a 3xx status code
func (o *MultiTransferByCustomerOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this multi transfer by customer o k response has a 4xx status code
func (o *MultiTransferByCustomerOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this multi transfer by customer o k response has a 5xx status code
func (o *MultiTransferByCustomerOK) IsServerError() bool {
	return false
}

// IsCode returns true when this multi transfer by customer o k response a status code equal to that given
func (o *MultiTransferByCustomerOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the multi transfer by customer o k response
func (o *MultiTransferByCustomerOK) Code() int {
	return 200
}

func (o *MultiTransferByCustomerOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/multi-transfer/customer][%d] multiTransferByCustomerOK %s", 200, payload)
}

func (o *MultiTransferByCustomerOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/multi-transfer/customer][%d] multiTransferByCustomerOK %s", 200, payload)
}

func (o *MultiTransferByCustomerOK) GetPayload() *models.ChannelTransferTransferStatusResponse {
	return o.Payload
}

func (o *MultiTransferByCustomerOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChannelTransferTransferStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMultiTransferByCustomerInternalServerError creates a MultiTransferByCustomerInternalServerError with default headers values
func NewMultiTransferByCustomerInternalServerError() *MultiTransferByCustomerInternalServerError {
	return &MultiTransferByCustomerInternalServerError{}
}

/*
MultiTransferByCustomerInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type MultiTransferByCustomerInternalServerError struct {
	Payload *models.ChannelTransferErrorResponse
}

// IsSuccess returns true when this multi transfer by customer internal server error response has a 2xx status code
func (o *MultiTransferByCustomerInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this multi transfer by customer internal server error response has a 3xx status code
func (o *MultiTransferByCustomerInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this multi transfer by customer internal server error response has a 4xx status code
func (o *MultiTransferByCustomerInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this multi transfer by customer internal server error response has a 5xx status code
func (o *MultiTransferByCustomerInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this multi transfer by customer internal server error response a status code equal to that given
func (o *MultiTransferByCustomerInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the multi transfer by customer internal server error response
func (o *MultiTransferByCustomerInternalServerError) Code() int {
	return 500
}

func (o *MultiTransferByCustomerInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/multi-transfer/customer][%d] multiTransferByCustomerInternalServerError %s", 500, payload)
}

func (o *MultiTransferByCustomerInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/multi-transfer/customer][%d] multiTransferByCustomerInternalServerError %s", 500, payload)
}

func (o *MultiTransferByCustomerInternalServerError) GetPayload() *models.ChannelTransferErrorResponse {
	return o.Payload
}

func (o *MultiTransferByCustomerInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChannelTransferErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMultiTransferByCustomerDefault creates a MultiTransferByCustomerDefault with default headers values
func NewMultiTransferByCustomerDefault(code int) *MultiTransferByCustomerDefault {
	return &MultiTransferByCustomerDefault{
		_statusCode: code,
	}
}

/*
MultiTransferByCustomerDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type MultiTransferByCustomerDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// IsSuccess returns true when this multi transfer by customer default response has a 2xx status code
func (o *MultiTransferByCustomerDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this multi transfer by customer default response has a 3xx status code
func (o *MultiTransferByCustomerDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this multi transfer by customer default response has a 4xx status code
func (o *MultiTransferByCustomerDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this multi transfer by customer default response has a 5xx status code
func (o *MultiTransferByCustomerDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this multi transfer by customer default response a status code equal to that given
func (o *MultiTransferByCustomerDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the multi transfer by customer default response
func (o *MultiTransferByCustomerDefault) Code() int {
	return o._statusCode
}

func (o *MultiTransferByCustomerDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/multi-transfer/customer][%d] multiTransferByCustomer default %s", o._statusCode, payload)
}

func (o *MultiTransferByCustomerDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/multi-transfer/customer][%d] multiTransferByCustomer default %s", o._statusCode, payload)
}

func (o *MultiTransferByCustomerDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *MultiTransferByCustomerDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
