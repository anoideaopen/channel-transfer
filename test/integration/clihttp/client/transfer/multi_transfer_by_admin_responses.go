// Code generated by go-swagger; DO NOT EDIT.

package transfer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/anoideaopen/channel-transfer/test/integration/clihttp/models"
)

// MultiTransferByAdminReader is a Reader for the MultiTransferByAdmin structure.
type MultiTransferByAdminReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *MultiTransferByAdminReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewMultiTransferByAdminOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewMultiTransferByAdminInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewMultiTransferByAdminDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewMultiTransferByAdminOK creates a MultiTransferByAdminOK with default headers values
func NewMultiTransferByAdminOK() *MultiTransferByAdminOK {
	return &MultiTransferByAdminOK{}
}

/*
MultiTransferByAdminOK describes a response with status code 200, with default header values.

A successful response.
*/
type MultiTransferByAdminOK struct {
	Payload *models.ChannelTransferTransferStatusResponse
}

// IsSuccess returns true when this multi transfer by admin o k response has a 2xx status code
func (o *MultiTransferByAdminOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this multi transfer by admin o k response has a 3xx status code
func (o *MultiTransferByAdminOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this multi transfer by admin o k response has a 4xx status code
func (o *MultiTransferByAdminOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this multi transfer by admin o k response has a 5xx status code
func (o *MultiTransferByAdminOK) IsServerError() bool {
	return false
}

// IsCode returns true when this multi transfer by admin o k response a status code equal to that given
func (o *MultiTransferByAdminOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the multi transfer by admin o k response
func (o *MultiTransferByAdminOK) Code() int {
	return 200
}

func (o *MultiTransferByAdminOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/multi-transfer/admin][%d] multiTransferByAdminOK %s", 200, payload)
}

func (o *MultiTransferByAdminOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/multi-transfer/admin][%d] multiTransferByAdminOK %s", 200, payload)
}

func (o *MultiTransferByAdminOK) GetPayload() *models.ChannelTransferTransferStatusResponse {
	return o.Payload
}

func (o *MultiTransferByAdminOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChannelTransferTransferStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMultiTransferByAdminInternalServerError creates a MultiTransferByAdminInternalServerError with default headers values
func NewMultiTransferByAdminInternalServerError() *MultiTransferByAdminInternalServerError {
	return &MultiTransferByAdminInternalServerError{}
}

/*
MultiTransferByAdminInternalServerError describes a response with status code 500, with default header values.

Internal server error
*/
type MultiTransferByAdminInternalServerError struct {
	Payload *models.ChannelTransferErrorResponse
}

// IsSuccess returns true when this multi transfer by admin internal server error response has a 2xx status code
func (o *MultiTransferByAdminInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this multi transfer by admin internal server error response has a 3xx status code
func (o *MultiTransferByAdminInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this multi transfer by admin internal server error response has a 4xx status code
func (o *MultiTransferByAdminInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this multi transfer by admin internal server error response has a 5xx status code
func (o *MultiTransferByAdminInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this multi transfer by admin internal server error response a status code equal to that given
func (o *MultiTransferByAdminInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the multi transfer by admin internal server error response
func (o *MultiTransferByAdminInternalServerError) Code() int {
	return 500
}

func (o *MultiTransferByAdminInternalServerError) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/multi-transfer/admin][%d] multiTransferByAdminInternalServerError %s", 500, payload)
}

func (o *MultiTransferByAdminInternalServerError) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/multi-transfer/admin][%d] multiTransferByAdminInternalServerError %s", 500, payload)
}

func (o *MultiTransferByAdminInternalServerError) GetPayload() *models.ChannelTransferErrorResponse {
	return o.Payload
}

func (o *MultiTransferByAdminInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ChannelTransferErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewMultiTransferByAdminDefault creates a MultiTransferByAdminDefault with default headers values
func NewMultiTransferByAdminDefault(code int) *MultiTransferByAdminDefault {
	return &MultiTransferByAdminDefault{
		_statusCode: code,
	}
}

/*
MultiTransferByAdminDefault describes a response with status code -1, with default header values.

An unexpected error response.
*/
type MultiTransferByAdminDefault struct {
	_statusCode int

	Payload *models.GooglerpcStatus
}

// IsSuccess returns true when this multi transfer by admin default response has a 2xx status code
func (o *MultiTransferByAdminDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this multi transfer by admin default response has a 3xx status code
func (o *MultiTransferByAdminDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this multi transfer by admin default response has a 4xx status code
func (o *MultiTransferByAdminDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this multi transfer by admin default response has a 5xx status code
func (o *MultiTransferByAdminDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this multi transfer by admin default response a status code equal to that given
func (o *MultiTransferByAdminDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the multi transfer by admin default response
func (o *MultiTransferByAdminDefault) Code() int {
	return o._statusCode
}

func (o *MultiTransferByAdminDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/multi-transfer/admin][%d] multiTransferByAdmin default %s", o._statusCode, payload)
}

func (o *MultiTransferByAdminDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /v1/multi-transfer/admin][%d] multiTransferByAdmin default %s", o._statusCode, payload)
}

func (o *MultiTransferByAdminDefault) GetPayload() *models.GooglerpcStatus {
	return o.Payload
}

func (o *MultiTransferByAdminDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.GooglerpcStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
