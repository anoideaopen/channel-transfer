// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.1
// source: batcher.proto

package proto

import (
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumeration for request status
type Status int32

const (
	Status_STATUS_UNKNOWN  Status = 0 // Default, unspecified status
	Status_STATUS_ACCEPTED Status = 1 // Request accepted for processing
	Status_STATUS_REJECTED Status = 2 // Request rejected
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "STATUS_UNKNOWN",
		1: "STATUS_ACCEPTED",
		2: "STATUS_REJECTED",
	}
	Status_value = map[string]int32{
		"STATUS_UNKNOWN":  0,
		"STATUS_ACCEPTED": 1,
		"STATUS_REJECTED": 2,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_batcher_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_batcher_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_batcher_proto_rawDescGZIP(), []int{0}
}

// Simplified request for gRPC service
type HlfBatcherRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel          string                `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`                                             // Channel identifier (mandatory)
	Chaincode        string                `protobuf:"bytes,2,opt,name=chaincode,proto3" json:"chaincode,omitempty"`                                         // Chaincode identifier (mandatory)
	Method           string                `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`                                               // Method, the chaincode function to invoke (mandatory)
	BatcherRequestId string                `protobuf:"bytes,4,opt,name=batcher_request_id,json=batcherRequestId,proto3" json:"batcher_request_id,omitempty"` // Unique batcher request ID (mandatory)
	Args             [][]byte              `protobuf:"bytes,5,rep,name=args,proto3" json:"args,omitempty"`                                                   // Arguments for the chaincode function (mandatory)
	TraceId          *wrappers.StringValue `protobuf:"bytes,6,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`                              // Trace ID for tracking the request (optional)
	SpanId           *wrappers.StringValue `protobuf:"bytes,7,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`                                 // Span ID for tracking a specific step in the trace (optional)
}

func (x *HlfBatcherRequest) Reset() {
	*x = HlfBatcherRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batcher_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HlfBatcherRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HlfBatcherRequest) ProtoMessage() {}

func (x *HlfBatcherRequest) ProtoReflect() protoreflect.Message {
	mi := &file_batcher_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HlfBatcherRequest.ProtoReflect.Descriptor instead.
func (*HlfBatcherRequest) Descriptor() ([]byte, []int) {
	return file_batcher_proto_rawDescGZIP(), []int{0}
}

func (x *HlfBatcherRequest) GetChannel() string {
	if x != nil {
		return x.Channel
	}
	return ""
}

func (x *HlfBatcherRequest) GetChaincode() string {
	if x != nil {
		return x.Chaincode
	}
	return ""
}

func (x *HlfBatcherRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HlfBatcherRequest) GetBatcherRequestId() string {
	if x != nil {
		return x.BatcherRequestId
	}
	return ""
}

func (x *HlfBatcherRequest) GetArgs() [][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *HlfBatcherRequest) GetTraceId() *wrappers.StringValue {
	if x != nil {
		return x.TraceId
	}
	return nil
}

func (x *HlfBatcherRequest) GetSpanId() *wrappers.StringValue {
	if x != nil {
		return x.SpanId
	}
	return nil
}

// Response from HLF Batcher to Channel Transfer
type HLFBatcherResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  Status                `protobuf:"varint,1,opt,name=status,proto3,enum=core.hlf_batcher.Status" json:"status,omitempty"` // Status of the request ("accepted" or "rejected")
	Message *wrappers.StringValue `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                             // Confirmation or error message (optional)
}

func (x *HLFBatcherResponse) Reset() {
	*x = HLFBatcherResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_batcher_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HLFBatcherResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HLFBatcherResponse) ProtoMessage() {}

func (x *HLFBatcherResponse) ProtoReflect() protoreflect.Message {
	mi := &file_batcher_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HLFBatcherResponse.ProtoReflect.Descriptor instead.
func (*HLFBatcherResponse) Descriptor() ([]byte, []int) {
	return file_batcher_proto_rawDescGZIP(), []int{1}
}

func (x *HLFBatcherResponse) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_STATUS_UNKNOWN
}

func (x *HLFBatcherResponse) GetMessage() *wrappers.StringValue {
	if x != nil {
		return x.Message
	}
	return nil
}

var File_batcher_proto protoreflect.FileDescriptor

var file_batcher_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x10, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x68, 0x6c, 0x66, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x95, 0x02, 0x0a, 0x11, 0x68, 0x6c, 0x66, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x35, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x22, 0x7e, 0x0a, 0x12, 0x48, 0x4c, 0x46,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x18, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x68, 0x6c, 0x66, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2a, 0x46, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x4a, 0x45, 0x43, 0x54, 0x45, 0x44, 0x10,
	0x02, 0x32, 0x73, 0x0a, 0x11, 0x48, 0x4c, 0x46, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x41,
	0x64, 0x61, 0x70, 0x74, 0x65, 0x72, 0x12, 0x5e, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x63, 0x6f,
	0x72, 0x65, 0x2e, 0x68, 0x6c, 0x66, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x2e, 0x68,
	0x6c, 0x66, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x68, 0x6c, 0x66, 0x5f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x72, 0x2e, 0x48, 0x4c, 0x46, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x6e, 0x6f, 0x69, 0x64, 0x65, 0x61, 0x6f, 0x70, 0x65, 0x6e,
	0x2f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x2d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_batcher_proto_rawDescOnce sync.Once
	file_batcher_proto_rawDescData = file_batcher_proto_rawDesc
)

func file_batcher_proto_rawDescGZIP() []byte {
	file_batcher_proto_rawDescOnce.Do(func() {
		file_batcher_proto_rawDescData = protoimpl.X.CompressGZIP(file_batcher_proto_rawDescData)
	})
	return file_batcher_proto_rawDescData
}

var file_batcher_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_batcher_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_batcher_proto_goTypes = []any{
	(Status)(0),                  // 0: core.hlf_batcher.Status
	(*HlfBatcherRequest)(nil),    // 1: core.hlf_batcher.hlfBatcherRequest
	(*HLFBatcherResponse)(nil),   // 2: core.hlf_batcher.HLFBatcherResponse
	(*wrappers.StringValue)(nil), // 3: google.protobuf.StringValue
}
var file_batcher_proto_depIdxs = []int32{
	3, // 0: core.hlf_batcher.hlfBatcherRequest.trace_id:type_name -> google.protobuf.StringValue
	3, // 1: core.hlf_batcher.hlfBatcherRequest.span_id:type_name -> google.protobuf.StringValue
	0, // 2: core.hlf_batcher.HLFBatcherResponse.status:type_name -> core.hlf_batcher.Status
	3, // 3: core.hlf_batcher.HLFBatcherResponse.message:type_name -> google.protobuf.StringValue
	1, // 4: core.hlf_batcher.HLFBatcherAdapter.SubmitTransaction:input_type -> core.hlf_batcher.hlfBatcherRequest
	2, // 5: core.hlf_batcher.HLFBatcherAdapter.SubmitTransaction:output_type -> core.hlf_batcher.HLFBatcherResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_batcher_proto_init() }
func file_batcher_proto_init() {
	if File_batcher_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_batcher_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*HlfBatcherRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_batcher_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*HLFBatcherResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_batcher_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_batcher_proto_goTypes,
		DependencyIndexes: file_batcher_proto_depIdxs,
		EnumInfos:         file_batcher_proto_enumTypes,
		MessageInfos:      file_batcher_proto_msgTypes,
	}.Build()
	File_batcher_proto = out.File
	file_batcher_proto_rawDesc = nil
	file_batcher_proto_goTypes = nil
	file_batcher_proto_depIdxs = nil
}
