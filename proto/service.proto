syntax = "proto3";

package core.channel_transfer;
option go_package = "github.com/anoideaopen/channel-transfer/proto";

import "google/api/annotations.proto";
import "google/protobuf/type.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

// ErrorResponse response with an error
message ErrorResponse {
  string error = 1; // error message
}

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Cross chanel transfer";
    version: "1.0";
    description: "";
    license: {
      name: "Apache-2.0";
    };
  };
  schemes: HTTP;
  consumes: "application/json";
  produces: "application/json";
  responses: {
    key: "500"
    value: {
      description: "Internal server error"
      schema:{
        json_schema:{
          ref: ".core.channel_transfer.ErrorResponse"
        }
      }
    }
  }
};

service API {
  rpc TransferByCustomer(TransferBeginCustomerRequest) returns (TransferStatusResponse){
    option (google.api.http) = {
      post: "/v1/transfer/customer"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Transfer cross chanel be customer";
      operation_id: "transferByCustomer";
      tags: "Transfer";
    };
  }

  rpc TransferByAdmin(TransferBeginAdminRequest) returns(TransferStatusResponse) {
    option (google.api.http) = {
      post: "/v1/transfer/admin"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Transfer cross chanel be admin";
      operation_id: "transferByAdmin";
      tags: "Transfer";
    };
  }

  rpc MultiTransferByCustomer(MultiTransferBeginCustomerRequest) returns (TransferStatusResponse){
    option (google.api.http) = {
      post: "/v1/multi-transfer/customer"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Multi transfer cross chanel be customer";
      operation_id: "multiTransferByCustomer";
      tags: "Transfer";
    };
  }

  rpc MultiTransferByAdmin(MultiTransferBeginAdminRequest) returns(TransferStatusResponse) {
    option (google.api.http) = {
      post: "/v1/multi-transfer/admin"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Multi transfer cross chanel be admin";
      operation_id: "multiTransferByAdmin";
      tags: "Transfer";
    };
  }

  rpc TransferStatus(TransferStatusRequest) returns (TransferStatusResponse){//nolint
    option (google.api.http) = {
      get: "/v1/status/{id_transfer}"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get status transfer by id transfer";
      operation_id: "transferStatus";
      tags: "Transfer";
    };
  }
}

// GeneralParams general parameters for every request
message GeneralParams {
  string method_name = 1; // method name
  string request_id = 2; // request ID (may be empty)
  string chaincode = 3; // chaincode name
  string channel = 4; // channel name
  string nonce = 5; // request nonce
  string public_key = 6; // public key of user, signed the request
  string sign = 7; // request sign
  repeated google.protobuf.Option options = 8;
}

// TransferBeginCustomerRequest request for tokens transfer by tokens owner
message TransferBeginCustomerRequest{
  GeneralParams generals = 1; // general parameters
  string id_transfer = 2; // transfer ID (should be unique)
  string channel_to = 3; // destination channel
  string token = 4; // Tokens to transfer
  string amount = 5; // Amount of tokens to transfer
  repeated google.protobuf.Option options = 6;
}

// TransferBeginAdminRequest request for tokens transfer by platform administrator
message TransferBeginAdminRequest{
  GeneralParams generals = 1; // general parameters
  string id_transfer = 2; // transfer ID (should be unique)
  string channel_to = 3; // destination channel
  string address = 4; // token's owner address
  string token = 5; // tokens to transfer
  string amount = 6; // amount of tokens to transfer
  repeated google.protobuf.Option options = 7;
}

// TransferItem item parameters for MultiTransferBeginCustomerRequest and MultiTransferBeginAdminRequest
message TransferItem{
  string amount = 1; // Amount of token to transfer
  string token = 2; // Token to transfer
}

// MultiTransferBeginAdminRequest request for tokens transfer by tokens owner
message MultiTransferBeginCustomerRequest{
  GeneralParams generals = 1; // general parameters
  string id_transfer = 2; // transfer ID (should be unique)
  string channel_to = 3; // destination channel
  repeated TransferItem items = 4; // items to transfer
  repeated google.protobuf.Option options = 5;
}

// MultiTransferBeginAdminRequest request for tokens transfer by platform administrator
message MultiTransferBeginAdminRequest{
  GeneralParams generals = 1; // general parameters
  string id_transfer = 2; // transfer ID (should be unique)
  string channel_to = 3; // destination channel
  string address = 4; // token's owner address
  repeated TransferItem items = 5; // items to transfer
  repeated google.protobuf.Option options = 6;
}

// TransferStatusResponse response for TransferStatus transaction
message TransferStatusResponse {
  enum Status {
    STATUS_IN_PROCESS = 0;
    STATUS_UNDEFINED = 1;
    STATUS_COMPLETED = 2;
    STATUS_CANCELED = 3;
    STATUS_ERROR = 4;
  }

  string id_transfer = 1; // transfer ID
  Status status = 2; // transfer status
  string message = 3; // error message (may be empty)
}

// TransferStatusRequest request for transfer status
message TransferStatusRequest {
  string id_transfer = 1; // transfer ID
  repeated google.protobuf.Option options = 2;
}